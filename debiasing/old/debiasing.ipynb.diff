# Use cat or less to view this file!

[0m[34m## modified /cells/36/source:[0m
[36m@@ -1,8 +1,6 @@[m
 class FunctionFit():[m
 [m
[31m-    def __init__(self, sample, bins, question, answer):[m
[31m-        self.sample = sample[m
[31m-        self.bins = bins[m
[32m+[m[32m    def __init__(self, question, answer):[m
         self.question = question[m
         self.answer = answer[m
         self.parameter_table = Table(names=('logR50','Mr','z',[m
[36m@@ -27,7 +25,8 @@[m [mclass FunctionFit():[m
         fit_setup = function_[m
         res = minimize(self.chisq_fun, function_.p0,[m
                        args=(function_.function, x_fit, y_fit),[m
[31m-                       bounds=function_.bounds, method='SLSQP')[m
[32m+[m[32m                       bounds=function_.bounds)[m
[32m+[m[32m        #, method='SLSQP')[m
         Mr = np.mean(data[Mr_column])[m
         logR50 = np.mean(data[logR50_column])[m
         z_ = np.mean(data[z_column])[m

[0m[34m## modified /cells/39/source:[0m
[36m@@ -2,19 +2,18 @@[m [mdef fit_bins(sample, bins, function_dict,[m
              question='shape', answer='smooth', verbose=True):[m
     log_function = Function(function_dict,0)[m
     exp_function = Function(function_dict,1)[m
[31m-    logfit = FunctionFit(sample, bins, question, answer)[m
[31m-    expfit = FunctionFit(sample, bins, question, answer)[m
[32m+[m[32m    logfit = FunctionFit(question, answer)[m
[32m+[m[32m    expfit = FunctionFit(question, answer)[m
     v_unique = np.unique(bins.voronoi_bins)[m
     for v in v_unique:[m
[31m-        in_v = bins.voronoi_bins == v[m
[31m-        in_vp = np.all([in_v,sample.p_mask],axis=0)[m
[31m-        z_unique = np.unique(bins.z_bins[in_vp])[m
[32m+[m[32m        in_v = bins.voronoi_bins[sample.p_mask] == v[m
[32m+[m[32m        z_unique = np.unique(bins.z_bins[sample.p_mask][in_v])[m
         for z in z_unique:[m
[31m-            in_z = bins.z_bins == z[m
[31m-            in_vpz = np.all([in_vp,in_z],axis=0)[m
[31m-            logfit.cumfrac_fit(sample.all_data[in_vpz],[m
[32m+[m[32m            in_z = bins.z_bins[sample.p_mask] == z[m
[32m+[m[32m            in_vz = np.all([in_v,in_z],axis=0)[m
[32m+[m[32m            logfit.cumfrac_fit(sample.less_data[in_vz],[m
                                log_function)[m
[31m-            expfit.cumfrac_fit(sample.all_data[in_vpz],[m
[32m+[m[32m            expfit.cumfrac_fit(sample.less_data[in_vz],[m
                                exp_function)[m
     chisq_log = np.sum(logfit.parameter_table['chisq'])[m
     chisq_exp = np.sum(expfit.parameter_table['chisq'])[m

[0m[34m## modified /cells/40/source:[0m
[36m@@ -1,5 +1,6 @@[m
[31m-def debias_data(data, fitted_k, fitted_c, function_,[m
[32m+[m[32mdef debias_data(sample, fitted_k, fitted_c, function_,[m
                 question='shape', answer='smooth'):[m
[32m+[m[32m    data = sample.less_data[m
     function = function_.function[m
     inverse_function = function_.inverse_function[m
     fv_column = question + '_' + answer + input_frac_suffix[m
[36m@@ -33,8 +34,12 @@[m [mdef debias_data(data, fitted_k, fitted_c, function_,[m
                                                c_low_z))[m
     debiased = 10**(logfv_debiased) # Get 'fv'.[m
     fv_debiased[nonzero] = debiased[m
[32m+[m[32m    fv_output = np.zeros(len(sample.all_data))[m
[32m+[m[32m    fv_output[sample.p_mask] = fv[m
[32m+[m[32m    fv_debiased_output = np.zeros(len(sample.all_data)) - 999[m
[32m+[m[32m    fv_debiased_output[sample.p_mask] = fv_debiased[m
     if np.max(fv) > 1:[m
         import IPython; IPython.embed()[m
     if np.max(fv_debiased) > 1:[m
         import IPython; IPython.embed()[m
[31m-    return fv, fv_debiased[m
[m
[32m+[m[32m    return fv_output, fv_debiased_output[m
[m

[0m[34m## modified /cells/43/source:[0m
[36m@@ -1,8 +1,11 @@[m
[31m-def debias_by_bin(full_data, vbins, zbins, question, answer):[m
[32m+[m[32mdef debias_by_bin(sample, vbins, zbins, question, answer):[m
     ''' Debias the data in a bin-by-bin basis'''[m
     # Get the raw and debiased fractions:[m
     fraction_column = question + '_' + answer + input_frac_suffix[m
[31m-    data_column = full_data[fraction_column][m
[32m+[m[32m    # using only appropriate galaxies[m
[32m+[m[32m    data_column = sample.less_data[fraction_column][m
[32m+[m[32m    vbins = vbins[sample.p_mask][m
[32m+[m[32m    zbins = zbins[sample.p_mask][m
     debiased_column = np.zeros(len(data_column))[m
     for v in np.unique(vbins):[m
         select_v = vbins == v[m
[36m@@ -22,4 +25,6 @@[m [mdef debias_by_bin(full_data, vbins, zbins, question, answer):[m
                             (select_z)] = debiased_fractions[m
     debiased_column[data_column == 0] = 0 # Don't 'debias up' 0s.[m
     debiased_column[data_column == 1] = 1 # Don't 'debias down' 1s.[m
[31m-    return debiased_column[m
[m
[32m+[m[32m    debiased_output = np.zeros(len(sample.all_data)) - 999[m
[32m+[m[32m    debiased_output[sample.p_mask] = debiased_column[m
[32m+[m[32m    return debiased_output[m
[m

[0m[34m## modified /cells/48/source:[0m
[36m@@ -8,7 +8,7 @@[m [mdef debias(data, question='features', answer='smooth',[m
     bins.voronoi_assignment(reassign=True)[m
     bins.redshift_assignment()[m
     # bin by bin...[m
[31m-    fv_debiased_bin = debias_by_bin(data_sample.all_data,[m
[32m+[m[32m    fv_debiased_bin = debias_by_bin(data_sample,[m
                                     bins.voronoi_bins,[m
                                     bins.z_bins,[m
                                     question, answer)[m
[36m@@ -25,10 +25,15 @@[m [mdef debias(data, question='features', answer='smooth',[m
     fitted_c = FitToBins(functionfit,'c',[m
                          clip_percentile).get_kc_function([m
         verbose=verbose)[m
[31m-    fv, fv_debiased = debias_data(data_sample.all_data,[m
[32m+[m[32m    fv, fv_debiased = debias_data(data_sample,[m
                                   fitted_k,fitted_c,function_,[m
                                   question,answer)[m
     fv_debiased[np.isfinite(fv_debiased) == False] = 0[m
[32m+[m[41m    [m
[32m+[m[32m    # AT THIS POINT fv, fv_debiased AND fv_debiased_bin CONTAIN[m
[32m+[m[32m    # AN ENTRY FOR EVERY GALAXY, BUT THOSE THAT DON'T FALL IN[m
[32m+[m[32m    # THE 'VALID' SAMPLE ARE SET EQUAL TO A FLAG VALUE OF -999[m
[32m+[m[41m    [m
     if use_fit is True:[m
         fv_debiased_final = fv_debiased[m
     elif use_bin is True:[m
[36m@@ -36,6 +41,9 @@[m [mdef debias(data, question='features', answer='smooth',[m
     else:[m
         # need to check which is better - need a vol limited sample[m
         in_vl = data_sample.volume_limited_sample()[m
[32m+[m[32m        # need to limit to the 'valid' sample here,[m
[32m+[m[32m        # especially if we have not added the 'uncorrected' values back in[m
[32m+[m[32m        in_vl &= data_sample.p_mask[m
         z = data_sample.all_data[z_column][m
         chi2_bin = get_chi2(fv_debiased_bin[in_vl],[m
                             fv[in_vl],z[in_vl])[m

